-- Obfuscated Lua script for Delta X

local function YBuFcl(data)
    local t = 'ABCDEFGHIJ' .. 'KLMNOPQRSTUVWXYZ' .. 'abcdefghijklmnopqrstuvwxyz' .. '0123456789+/'
    return string.gsub(data, '[^'..t..'=]', '')
end

local function kokLsj(x)
    local t = 'ABCDEFGHIJ' .. 'KLMNOPQRSTUVWXYZ' .. 'abcdefghijklmnopqrstuvwxyz' .. '0123456789+/'
    if x == '=' then return '' end
    local r, f = '', (t:find(x)-1)
    for i=6, 1, -1 do
        r = r .. (f%2^i-f%2^(i-1)>0 and '1' or '0')
    end
    return r
end

local function XWzEaZ(input)
    local s1 = YBuFcl(input)
    local s2 = s1:gsub('.', function(x) return kokLsj(x) end)
    return s2:gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if #x ~= 8 then return '' end
        local c = 0
        for i=1, 8 do
            c = c + (x:sub(i,i)=='1' and 2^(8-i) or 0)
        end
        return string.char(c)
    end)
end

local pkOTFJ = ""
local EIzpkQ = XWzEaZ(pkOTFJ)
if EIzpkQ then
    loadstring(EIzpkQ)()
else
    error("Failed to decode script")
end
